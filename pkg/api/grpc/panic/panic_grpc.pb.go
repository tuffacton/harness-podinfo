// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.1
// source: panic.proto

package panic

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PanicServiceClient is the client API for PanicService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PanicServiceClient interface {
	Panic(ctx context.Context, in *PanicRequest, opts ...grpc.CallOption) (*PanicResponse, error)
}

type panicServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPanicServiceClient(cc grpc.ClientConnInterface) PanicServiceClient {
	return &panicServiceClient{cc}
}

func (c *panicServiceClient) Panic(ctx context.Context, in *PanicRequest, opts ...grpc.CallOption) (*PanicResponse, error) {
	out := new(PanicResponse)
	err := c.cc.Invoke(ctx, "/panic.PanicService/Panic", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PanicServiceServer is the server API for PanicService service.
// All implementations must embed UnimplementedPanicServiceServer
// for forward compatibility
type PanicServiceServer interface {
	Panic(context.Context, *PanicRequest) (*PanicResponse, error)
	mustEmbedUnimplementedPanicServiceServer()
}

// UnimplementedPanicServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPanicServiceServer struct {
}

func (UnimplementedPanicServiceServer) Panic(context.Context, *PanicRequest) (*PanicResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Panic not implemented")
}
func (UnimplementedPanicServiceServer) mustEmbedUnimplementedPanicServiceServer() {}

// UnsafePanicServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PanicServiceServer will
// result in compilation errors.
type UnsafePanicServiceServer interface {
	mustEmbedUnimplementedPanicServiceServer()
}

func RegisterPanicServiceServer(s grpc.ServiceRegistrar, srv PanicServiceServer) {
	s.RegisterService(&PanicService_ServiceDesc, srv)
}

func _PanicService_Panic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PanicRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PanicServiceServer).Panic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/panic.PanicService/Panic",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PanicServiceServer).Panic(ctx, req.(*PanicRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PanicService_ServiceDesc is the grpc.ServiceDesc for PanicService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PanicService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "panic.PanicService",
	HandlerType: (*PanicServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Panic",
			Handler:    _PanicService_Panic_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "panic.proto",
}
